//
// Mongo Shell script to create or referenece (if LDAP/Kerberos) a sample user
// who has access to a sample database
//

{% include "authenticate.js.j2" %}

//
// Create a read-only role on the adults collection/view only
//

{% if client_auth_method == 'ldap' and ldap_integration == 'direct' and role_membership == 'external' %}
rolename = "cn=AppReadOnly,ou=Groups,dc={{ org_name }},dc={{ org_type }}";
{% else %}
rolename = "AppReadOnly";
{% endif %}

db.getSiblingDB("admin").createRole(
    {
        role: rolename,
        privileges: [
            {resource: { db: "maindata", collection: "adults" }, actions: ["find"]}
        ],
        roles: []
    }
 );


//
// Create user in admin or external dataabase, associated with the new role
//

{% if client_auth_method == 'userpwd' %}
// Creating local database user for SCRAM-SHA-1 user access
db.getSiblingDB("admin").createUser(
    {
      user : "{{ db_sampleuser_name }}",
      pwd  : "{{ db_sampleuser_password }}",
      roles: [ { role: rolename, db: "admin" } ]
    }
 );
{% elif client_auth_method == 'cert' %}
// Creating external authentication reference for certficate user accss
db.getSiblingDB("$external").createUser(
    {
      user : "CN={{ db_sampleuser_name }}{{ client_dn_suffix }}",
      roles: [ { role: rolename, db: "admin" } ]
    }
 );
{% elif client_auth_method == 'ldap' and ldap_integration == 'direct' and role_membership == 'external' %}
// Nothing to do as as using native LDAP integration with external authorization, so no need to create a user mapped to the role, because the external LDAP configuration already infers it
{% elif client_auth_method == 'ldap' %}
// Creating external authentication reference for LDAP proxy or direct user access, and role mappings managed internally
db.getSiblingDB("$external").createUser(
    {
      user : "{{ db_sampleuser_name }}",
      roles: [ { role: rolename, db: "admin" } ]
    }
 );
{% elif client_auth_method == 'kerberos' %}
// Creating external authentication reference fer Kerberos user access
db.getSiblingDB("$external").createUser(
    {
      user : "{{ db_sampleuser_name }}@{{ org_name|upper }}.{{ org_type|upper }}",
      roles: [ { role: rolename, db: "admin" } ]
    }
 );
{% else %}
// Nothing to do as authentication is not enabled in MongoDB 
{% endif %}



