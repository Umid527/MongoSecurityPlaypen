//
// Mongo Shell script to create or referenece (if LDAP/Kerberos) a sample user
// who has access to a sample database
//

{% include "authenticate.js.j2" %}

{% if client_auth_method == 'userpwd' %}
// Creating local database user for SCRAM-SHA-1 user access
db.getSiblingDB("admin").createUser(
    {
      user : "{{ db_sampleuser_name }}",
      pwd  : "{{ db_sampleuser_password }}",
      roles: [ { role: "read", db: "maindata" } ]
    }
 );
{% elif client_auth_method == 'cert' %}
// Creating external authentication reference for certficate user accss
db.getSiblingDB("$external").createUser(
    {
      user : "CN={{ db_sampleuser_name }}{{ client_dn_suffix }}",
      roles: [ { role: "read", db: "maindata" } ]
    }
 );
{% elif client_auth_method == 'ldap' and ldap_integration == 'direct' and role_membership == 'external' %}
// Creating external authentication reference for LDAP user access with external LDAP group/role mappings
// (if using native LDAP integration with external authorization, need to authenticate and then create role names that match external LDAP groups)
db.getSiblingDB("$external").auth(
    {
         mechanism: "PLAIN",
         user: "{{ db_adminuser_name }}",
         pwd:  "{{ db_adminuser_password }}",
         digestPassword: false
    }
 );
db.getSiblingDB("admin").createRole(
    { 
        role: "cn=AppReadOnly,ou=Groups,dc=WizzyIndustries,dc=com", 
        privileges: [], 
        roles: [ { role: "read", db: "maindata" } ]
    }
); 
{% elif client_auth_method == 'ldap' %}
// Creating external authentication reference for LDAP proxy or direct user access, and role mappings managed internally
db.getSiblingDB("$external").createUser(
    {
      user : "{{ db_sampleuser_name }}",
      roles: [ { role: "read", db: "maindata" } ]
    }
 );
{% elif client_auth_method == 'kerberos' %}
// Creating external authentication reference fer Kerberos user access
db.getSiblingDB("$external").createUser(
    {
      user : "{{ db_sampleuser_name }}@{{ org_name|upper }}.{{ org_type|upper }}",
      roles: [ { role: "read", db: "maindata" } ]
    }
 );
{% else %}
// Nothing to do as authentication is not enabled in MongoDB (or using external LDAP role to group mappings)
{% endif %}



